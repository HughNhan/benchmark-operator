---

- name: A1 Get current state
  k8s_facts:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- operator_sdk.util.k8s_status:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: "{{ meta.name }}"
    namespace: "{{ operator_namespace }}"
    status:
      state: Building
      complete: false
  when: resource_state.resources[0].status.state is not defined

- name: A3 Get current state - If it has changed
  k8s_facts:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- name: A4 Capture operator information
  k8s_facts:
    kind: Pod
    api_version: v1
    namespace: '{{ operator_namespace }}'
    label_selectors:
      - name = benchmark-operator
  register: bo

- name: List Nodes Labeled as Workers
  k8s_info:
    api_version: v1
    kind: Node
    label_selectors:
      - "node-role.kubernetes.io/worker="
  register: node_list
  no_log: True

- name: Isolate Worker Role Hostnames
  set_fact:
    worker_node_list: "{{ node_list | json_query('resources[].metadata.name') | list }}"

- name: Exclude unhealthy nodes i.e. low diskspace 
  set_fact:
      worker_node_list: "{{ worker_node_list | difference(workload_args.excluded_node[0]) }}"
  when: workload_args.excluded_node is defined and workload_args.excluded_node|length > 0

- name: A5 Capture ServiceIP
  k8s_facts:
    kind: Service
    api_version: v1
    namespace: '{{ operator_namespace }}'
    label_selectors:
      - type = uperf-bench-server-{{ trunc_uuid }}
  register: serviceip
  when: workload_args.serviceip is defined and workload_args.serviceip

#
# Compute node and pod limits using CR params while taking into account 
# of the actual number of nodes available in the system
#
- name: init pod low idx
  set_fact:
      pod_low_idx: "{{ workload_args.density_range[0]|int | default('1')|int - 1 }}"
  when: workload_args.density_range is defined

- name: init pod hi idx
  set_fact:
      pod_hi_idx: "{{ workload_args.density_range[1]|int | default('1')|int - 1 }}"
  when: workload_args.density_range is defined

- name: init node low idx
  set_fact:
      node_low_idx: "{{ workload_args.node_range[0]|int | default('1')|int - 1 }}"
  when: workload_args.node_range is defined

- name: init node hi idx
  set_fact:
      node_hi_idx: "{{ workload_args.node_range[1]|int | default('1')|int - 1 }}"
  when: workload_args.node_range is defined

- name: Adjust node_hi_idx if cluster has less nodes
  set_fact:
      node_hi_idx: "{{ worker_node_list|length| default('0')|int -1 }}"
  when: "node_hi_idx|int >= worker_node_list|length| default('0')|int "

#
# "pin" mode exists prior to "scale" mode. If "pin: true", we will
# do the old way using pin_server and pin_client
#
- name: A6 Record num server (V1) pods using workload_args.pair - TBD
  set_fact:
      num_server_pods: "{{ workload_args.pair | default('1')|int }}"
  when: workload_args.node_range is not defined

  #- name: A7 V2 scale run -  Setup eligible node (static) list - Tobe replaced by real node list builder
  #  set_fact:
  #      worker_node_list: "{{workload_args.node_list[0]}}"
  #  when: workload_args.node_range is not defined
  #
  #- name: A7 V1 non-scale Setup eligible node (static) list - Tobe replaced by real node list builder
  #  set_fact:
  #      worker_node_list: "{{workload_args.node_list}}"
  #  when: workload_args.node_range is defined

- name: A8 V2 Record num server pods using new worker_node_list
  set_fact:
      num_server_pods: "{{ (node_hi_idx|int+1) * (pod_hi_idx|int+1) }}"
  when: workload_args.node_range is defined

